"No"=0
))
),
mainPanel (
plotOutput("Importance"),
textOutput("liklihood")
)
)
server <-function(input,output){
# d<-read.csv("ProjectData.csv")
# output$Importance<- renderPlot({hist(input$Age)})
# output$liklihood<-renderText({
#
#   d[1,1]
#   })
}
shinyApp(ui,server)
runApp('Documents/Summer Project/app')
#install.packages("shiny")
library(shiny)
ui<- pageWithSidebar(
headerPanel ("Total Hip Replacement Risk Assessment"),
sidebarPanel(
headerPanel(tags$h3("Please enter patient demographics and comorbidities.")),
sliderInput(inputId = "Age", label = "Select Age", value = 65, min = 30, max=110),
radioButtons(inputId = "Sex", label="Gender:",
c("Male"=1,
"Female"=2
)),
selectInput(inputId = "CHID", label="Does the patient have a history with CIHD?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HT", label="Does the patient have a history with HT?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "AF", label="Does the patient have a history with AF?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "IDDM", label="Does the patient have a history with IDDM?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "NIDDM", label="Does the patient have a history with NIDDM?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HCD", label="Does the patient have a history with HCD?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "COPD", label="Does the patient have a history with COPD?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "Osteoporosis", label="Does the patient have a history with Osteoporosis?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HC", label="Does the patient have a history with HC?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HCVA", label="Does the patient have a history with HCVA?",
c("Yes"=1,
"No"=0
))
),
mainPanel (
plotOutput("Importance"),
textOutput("liklihood")
)
)
server <-function(input,output){
# d<-read.csv("ProjectData.csv")
# output$Importance<- renderPlot({hist(input$Age)})
# output$liklihood<-renderText({
#
#   d[1,1]
#   })
}
shinyApp(ui,server)
ui<- pageWithSidebar(
headerPanel ("Total Hip Replacement Risk Assessment"),
sidebarPanel(
headerPanel(tags$h3("Please enter patient demographics and comorbidities.")),
sliderInput(inputId = "Age", label = "Select Age", value = 65, min = 30, max=110),
radioButtons(inputId = "Sex", label="Gender:",
c("Male"=1,
"Female"=2
)),
selectInput(inputId = "CHID", label="Does the patient have a history with CIHD?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HT", label="Does the patient have a history with HT?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "AF", label="Does the patient have a history with AF?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "IDDM", label="Does the patient have a history with IDDM?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "NIDDM", label="Does the patient have a history with NIDDM?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HCD", label="Does the patient have a history with HCD?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "COPD", label="Does the patient have a history with COPD?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "Osteoporosis", label="Does the patient have a history with Osteoporosis?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HC", label="Does the patient have a history with HC?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HCVA", label="Does the patient have a history with HCVA?",
c("Yes"=1,
"No"=0
))
),
mainPanel (
plotOutput("Importance"),
textOutput("liklihood")
)
)
d<-read.csv(file.choose())
d<-d[,1:19]
View(d)
d$died90= factor(d$died90, levels = c(0,1))
library(DMwR)
smote<- SMOTE(died90~ Age + Sex + IschemicHeartDisease+ Hyperthyroidism+ Hypothyroidism +IDDM +NIDDM+CoronaryHeartDisease+
COPD+Dementia +Alzheimers +DuodenalUlcers+ Osteoporosis +HC+HCVA+ Hypertension +AtrialFibrillation+Charlson,
data=d,perc.over =200,k=5, perc.under = 180, learner=NULL)
lrtrainsmote = glm(formula =died90~ Age + Sex + IschemicHeartDisease+ Hyperthyroidism+ Hypothyroidism +IDDM +NIDDM+CoronaryHeartDisease+
COPD+Dementia +Alzheimers +DuodenalUlcers+ Osteoporosis +HC+HCVA+ Hypertension +AtrialFibrillation+Charlson,
family= binomial,
data=smote)
prob_pred= predict(lrtrainsmote, type="response", newdata = data.frame("Age"=100, "Sex"=1, "IschemicHeartDisease"=1,
"Hyperthyroidism"=1,"Hypothyroidism"=1,"IDDM"=1,
"NIDDM"=1, "CoronaryHeartDisease"=0,
"COPD"=1, "Dementia"=0, "Alzheimers"=1,
"DuodenalUlcers"=1, "Osteoporosis"=1,"HC"=1,"HCVA"=1,
"Hypertension"=1, "AtrialFibrillation"=1,"Charlson"=0)
)
prob_pred
summary(lrtrainsmote)
library(caret)
plot(df, type="o")
barplot(varImp(lrtrainsmote))
vec<-df[,1]
vec
barplot(vec, names.arg = c("Age", "Sex", "IschemicHeartDisease",
"Hyperthyroidism","Hypothyroidism","IDDM",
"NIDDM", "CoronaryHeartDisease",
"COPD", "Dementia", "Alzheimers",
"DuodenalUlcers", "Osteoporosis","HC","HCVA",
"Hypertension", "AtrialFibrillation","Charlson"))
df<-data.frame(varImp(lrtrainsmote))
df
vec<-df[,1]
vec
barplot(vec, names.arg = c("Age", "Sex", "IschemicHeartDisease",
"Hyperthyroidism","Hypothyroidism","IDDM",
"NIDDM", "CoronaryHeartDisease",
"COPD", "Dementia", "Alzheimers",
"DuodenalUlcers", "Osteoporosis","HC","HCVA",
"Hypertension", "AtrialFibrillation","Charlson"))
barplot(vec, names.arg = c("Age", "Sex", "IschemicHeartDisease",
"Hyperthyroidism","Hypothyroidism","IDDM",
"NIDDM", "CoronaryHeartDisease",
"COPD", "Dementia", "Alzheimers",
"DuodenalUlcers", "Osteoporosis","HC","HCVA",
"Hypertension", "AtrialFibrillation","Charlson"), las=2)
barplot(vec, names.arg = c("Age", "Sex", "IschemicHeartDisease",
"Hyperthyroidism","Hypothyroidism","IDDM",
"NIDDM", "CoronaryHeartDisease",
"COPD", "Dementia", "Alzheimers",
"DuodenalUlcers", "Osteoporosis","HC","HCVA",
"Hypertension", "AtrialFibrillation","Charlson"), las=2,
main="Varibale importance to model")
#install.packages("shiny")
library(shiny)
ui<- pageWithSidebar(
headerPanel ("Total Hip Replacement Risk Assessment"),
sidebarPanel(
headerPanel(tags$h3("Please enter patient demographics and comorbidities.")),
sliderInput(inputId = "Age", label = "Select Age", value = 65, min = 30, max=110),
radioButtons(inputId = "Sex", label="Gender:",
c("Male"=1,
"Female"=2
)),
selectInput(inputId = "CIHD", label="Does the patient have a history with CIHD?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "Hyperthyroidism", label="Does the patient have a history with Hyperthyroidism?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "Hypothyroidism", label="Does the patient have a history with Hypothyroidism?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HT", label="Does the patient have a history with HT?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "AF", label="Does the patient have a history with AF?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "IDDM", label="Does the patient have a history with IDDM?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "NIDDM", label="Does the patient have a history with NIDDM?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HCD", label="Does the patient have a history with HCD?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "COPD", label="Does the patient have a history with COPD?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "Osteoporosis", label="Does the patient have a history with Osteoporosis?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HC", label="Does the patient have a history with HC?",
c("Yes"=1,
"No"=0
)),
selectInput(inputId = "HCVA", label="Does the patient have a history with HCVA?",
c("Yes"=1,
"No"=0
))
),
mainPanel (
#
plotOutput("Importance"),
textOutput("liklihood")
)
)
server <-function(input,output){
d<-read.csv("ProjectData.csv")
smote<- SMOTE(died90~ Age + Sex + IschemicHeartDisease+ Hyperthyroidism+ Hypothyroidism +IDDM +NIDDM+CoronaryHeartDisease+
COPD+Dementia +Alzheimers +DuodenalUlcers+ Osteoporosis +HC+HCVA+ Hypertension +AtrialFibrillation+Charlson,
data=d,perc.over =200,k=5, perc.under = 180, learner=NULL)
lrtrainsmote = glm(formula =died90~ Age + Sex + IschemicHeartDisease+ Hyperthyroidism+ Hypothyroidism +IDDM +NIDDM+CoronaryHeartDisease+
COPD+Dementia +Alzheimers +DuodenalUlcers+ Osteoporosis +HC+HCVA+ Hypertension +AtrialFibrillation+Charlson,
family= binomial,
data=smote)
output$liklihood<-renderText({
d$died90= factor(d$died90, levels = c(0,1))
library(DMwR)
# smote<- SMOTE(died90~ Age + Sex + IschemicHeartDisease+ Hyperthyroidism+ Hypothyroidism +IDDM +NIDDM+CoronaryHeartDisease+
#                 COPD+Dementia +Alzheimers +DuodenalUlcers+ Osteoporosis +HC+HCVA+ Hypertension +AtrialFibrillation+Charlson,
#               data=d,perc.over =200,k=5, perc.under = 180, learner=NULL)
#
#
# lrtrainsmote = glm(formula =died90~ Age + Sex + IschemicHeartDisease+ Hyperthyroidism+ Hypothyroidism +IDDM +NIDDM+CoronaryHeartDisease+
#                      COPD+Dementia +Alzheimers +DuodenalUlcers+ Osteoporosis +HC+HCVA+ Hypertension +AtrialFibrillation+Charlson,
#                    family= binomial,
#                    data=smote)
prob_pred= predict(lrtrainsmote, type="response", newdata = data.frame("Age"=input$Age, "Sex"=input$Sex, "IschemicHeartDisease"=input$CIHD,
"Hyperthyroidism"=input$Hyperthyroidism,"Hypothyroidism"=input$Hypothyroidism,
"IDDM"=input$IDDM,
"NIDDM"=input$NIDDM, "CoronaryHeartDisease"=0,
"COPD"=1, "Dementia"=0, "Alzheimers"=1,
"DuodenalUlcers"=1, "Osteoporosis"=1,"HC"=1,"HCVA"=1,
"Hypertension"=input$HT, "AtrialFibrillation"=input$AF,"Charlson"=0)
)
# prob_pred
input$HC
})
output$Importance<- renderPlot({
# smote<- SMOTE(died90~ Age + Sex + IschemicHeartDisease+ Hyperthyroidism+ Hypothyroidism +IDDM +NIDDM+CoronaryHeartDisease+
#                 COPD+Dementia +Alzheimers +DuodenalUlcers+ Osteoporosis +HC+HCVA+ Hypertension +AtrialFibrillation+Charlson,
#               data=d,perc.over =200,k=5, perc.under = 180, learner=NULL)
#
#
# lrtrainsmote = glm(formula =died90~ Age + Sex + IschemicHeartDisease+ Hyperthyroidism+ Hypothyroidism +IDDM +NIDDM+CoronaryHeartDisease+
#                      COPD+Dementia +Alzheimers +DuodenalUlcers+ Osteoporosis +HC+HCVA+ Hypertension +AtrialFibrillation+Charlson,
#                    family= binomial,
#                    data=smote)
library(caret)
df<-data.frame(varImp(lrtrainsmote))
vec<-df[,1]
barplot(vec, names.arg = c("Age", "Sex", "IschemicHeartDisease",
"Hyperthyroidism","Hypothyroidism","IDDM",
"NIDDM", "CoronaryHeartDisease",
"COPD", "Dementia", "Alzheimers",
"DuodenalUlcers", "Osteoporosis","HC","HCVA",
"Hypertension", "AtrialFibrillation","Charlson"), las=2,
main="Varibale importance to model")
})
}
shinyApp(ui,server)
d<-read.csv(file.choose())
View(d)
d<-d[,-18]
data<-d
data<-data[,1:20]
data<-data[,-18]
data<-data[,-18]
library(h2o)
h2o.init(nthreads = -1)
classifier= h2o.deeplearning(y='PEin90',
training_frame = as.h2o(smote),
activation= "Rectifier",
hidden = c(3,3),
epochs = 1,
train_samples_per_iteration = -2 #autotunes NN
)
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test[,-18]))
prob=as.data.frame(prob_pred)
prob1=prob$p1
y_pred= ifelse(prob1 >.5, 1, 0)
table(y_pred)
y_pred=as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test[,18], y_pred)
cm
set.seed(123)
split <- sample.split(data$PEin90, SplitRatio = 0.80)
train = subset(data, split==T)
test = subset(data,split==F)
library(DMwR)
smote<- SMOTE(PEin90~., data=train,perc.over =800,k=5, perc.under = 112, learner=NULL)
table(smote$PEin90)
set.seed(123)
split <- sample.split(data$PEin90, SplitRatio = 0.80)
train = subset(data, split==T)
set.seed(123)
split <- sample.split(data$PEin90, SplitRatio = 0.80)
data$PEin90= factor(data$PEin90, levels = c(0,1))
set.seed(123)
split <- sample.split(data$PEin90, SplitRatio = 0.80)
library(caTools)
set.seed(123)
split <- sample.split(data$PEin90, SplitRatio = 0.80)
train = subset(data, split==T)
test = subset(data,split==F)
smote[,-18] = scale(smote[,-18])
test[,-18] = scale(test[,-18])
library(h2o)
h2o.init(nthreads = -1)
classifier= h2o.deeplearning(y='PEin90',
training_frame = as.h2o(smote),
activation= "Rectifier",
hidden = c(3,3),
epochs = 1,
train_samples_per_iteration = -2 #autotunes NN
)
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test[,-18]))
prob=as.data.frame(prob_pred)
prob1=prob$p1
y_pred= ifelse(prob1 >.5, 1, 0)
table(y_pred)
y_pred=as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test[,18], y_pred)
cm
classifier= h2o.deeplearning(y='PEin90',
training_frame = as.h2o(smote),
activation= "Rectifier",
hidden = c(3,3),
epochs = 1,
train_samples_per_iteration = -2 #autotunes NN
)
shiny::runApp('Documents/OneDrive - University College London/Summer Project/app')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
# tags$h2("Exploring the THR Risk Assessment model:"),
# tags$h2("Exploring the THR Risk Assessment model:"),
# tags$h2("Exploring the THR Risk Assessment model:"),
# tags$h2("Exploring the THR Risk Assessment model:"),
# tags$h2("Exploring the THR Risk Assessment model:"),
# tags$h2("Exploring the THR Risk Assessment model:"),
# tags$h2("Exploring the THR Risk Assessment model:"),
# tags$h2("Exploring the THR Risk Assessment model:"),
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
View(d)
hist(d$died90)
d[2,]
d[2,1]
table(d$died90)
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
table(d$died90)
mytable <- table(d$died90)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Pie Chart of Species\n (with sample sizes)")
mytable <- table(d$MIin30)
mytable <- table(d$MIin30)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Pie Chart of Species\n (with sample sizes)")
mytable <- table(d$CDiff)
lbls <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls,
main="Pie Chart of Species\n (with sample sizes)")
shiny::runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
runApp('Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp')
olden(NNRF)
NNRF<- readRDS("NN/RFin30.rda")
olden(NNRF)
NNRF<- readRDS("NN/RFin30.rda")
NNInfection<- readRDS("NN/Infection.rda")
setwd("~/Documents/OneDrive - University College London/Summer Project/ShinyApp/MainApp")
NNRF<- readRDS("NN/RFin30.rda")
olden(NNRF)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d<-read.csv(file.choose())
d1<-d
View(d1)
d1<-d1[,1:22]
d1<-d1[,-18]
d1<-d1[,-18]
d1<-d1[,-18]
d1<-d1[,-18]
d1$Age<-(d1$Age-min(d1$Age))/(max(d1$Age)-min(d1$Age))
d1$Sex<-(d1$Sex-min(d1$Sex))/(max(d1$Sex)-min(d1$Sex))
set.seed(222)
div<- sample(2,nrow(d1),replace = T, prob = c(0.7,0.3))
training<-d1[div==1,]
testing<-d1[div==2,]
library(DMwR)
trainingSmote<-training
trainingSmote$CVAin30= factor(trainingSmote$CVAin30, levels = c(0,1))
smote<- SMOTE(CVAin30~., data=trainingSmote ,perc.over =550,k=5, perc.under = 138, learner=NULL)
table(smote$CVAin30)
trainingTest<-smote
trainingTest$CVAin30<-as.numeric(as.character(smote$CVAin30))
NN = neuralnet(CVAin30~ Age+Sex+CIHD+HyperT+HypoT+
IDDM+NIDDM+HCD+COPD+D+
Alz+Ost+HC+HCVA+DU+
HT+AF,
data=trainingTest,
hidden=c(3),
err.fct = "ce",
linear.output = F,
stepmax = 1e9,
threshold = 0.5,
lifesign="full"
)
pred<-compute((NN),testing[,-18])
#pred
p1<-pred$net.result
pred1<- ifelse(p1>0.5,1,0)
library(caret)
confusionMatrix(as.factor(pred1), as.factor(testing$CVAin30))
# install.packages("NeuralNetTools")
library(NeuralNetTools)
olden(NN)
runApp()
runApp()
runApp()
